@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using KnerdyKnitter.Models;
<div class="container">
<div class="row">
  <div class="col s12 m6 l6">
    <form class="edit-form" id="editForm" action="/scarf/create" method="post">
        <header class="form-header-dark">Create a pattern!</header>
        <div class="f-row select-color">
          <div class="f-col-2 dimensions">
            <label class="text-dark">Stitches: </label>
            <input class ="input-light" type="number" onchange="changeDimensions()" value="@Model.Width" name="width" id="width">
            <br>
            <label class="text-dark">Rows: </label>
            <input class ="input-light" type="number" onchange="changeDimensions()" value="@Model.Length" name="length" id="length">
          </div>
          <div class="f-col-2">
            <div class="f-row">
              <div class="f-col-2">
                <label class="text-dark">Primary:&nbsp&nbsp&nbsp&nbsp</label>
                <input class="input-light" type="color" onchange="changePrimaryColor()" value="@Model.Primary" name="primary" id="primaryColor">
              </div>
              <div class="f-col-2">
                <label class="text-dark">Secondary:</label>
                <input class ="input-light" type="color" onchange="changeSecondaryColor()" value="@Model.Secondary" name="secondary" id="secondaryColor"><br />
              </div>

            </div>
          </div>
        </div>
        <div class="f-row">
          <div class="f-col-2" id="select-rule">
            <label class="text-dark">Rule: </label>
            <input class ="input-light" type="number" min="1" max="256" onchange="changeRule()" value="30" name="rule" id="rule">
          </div>
        </div>
        <div class="f-row">
          <input class="btn-dark" type="submit" id="saveChanges" value="Save changes" />
        </div>
      </div>
    </form>
  </div>
  <div class="col-5 scarf-display">
    <div class="f-row flex-responsive scarf-svg">
      <div class="f-col-4 flex-center scarf-container">
        <svg class="scarf" width="1000" height="2000">
            @for (var row = 0; row < Model.Creation.Length/Model.Creation.GetLength(0); row++)
            {
                for (var col = 0; col < Model.Creation.GetLength(0); col++)
                {
                  var xValue=col*20;
                  var yValue=row*20;
                  if (Model.Creation[col, row]==0)
                  {
                      <rect id="" x="@xValue" y="@yValue" width="20" height="20" class="primary cell" />
                  }
                  else
                  {
                      <rect id=""  x="@xValue" y="@yValue" width="20" height="20" class="secondary cell" />
                  }
                }
            }
        </svg>
      </div>
    </div>
  </div>
</div>
